#Run via submit_main_snakemake.sh
#this snakemake pipeline is used to analyse the performance of isONform on Drosophila Data


#The following variables represent the paths to the files required to run this pipeline

###Script_input_folder: Equal to the folder the snakefile is located in. Should also contain all scripts needed for our analysis:
#script_input_folder=config["SCRIPT_FOLDER"]
outfolder_analysis = config["CLUSTER_OUT"]
infolder_alz = config["ALZ_IN"]
infolder_droso = config ["DROSO_IN"]
infolder_human_ont = config ["ONT_H_IN"]
dataset = config["DATASET"]
min_shared_minis =config["MIN_SHARED_MINIS"]
shell.prefix("set -o pipefail; ")
wildcard_constraints:
    nr_reads="[\d]+",
####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob

def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
	input: expand(outfolder_analysis+"isONclust_denovo_{min_shared_minis}_{dataset}.txt", min_shared_minis = config["MIN_SHARED_MINIS"], dataset =config["DATASET"]) # ,cluster_outfolder + "result_GeLuster.txt", cluster_outfolder+"result_rs_isONclust_denovo_{min_shared_minis}.txt" #, cluster_outfolder + "result_py_isONclust.txt", cluster_outfolder+"py/final_clusters.tsv",cluster_outfolder+"rs/final_clusters.tsv"




###############################################################################################################################
#                                                     ISONFORM ANALYSIS                                                       #
###############################################################################################################################




rule alz_isONclust_rs:
        input: fastq_alz = infolder_alz +'data/full_length_output.fastq',
               alignment_alz = infolder_alz +"stringtie/ont_human_aligned.sorted.bam",
        output: outfolder_analysis+"isONclust_denovo_{min_shared_minis}_ALZ.txt" 
        run:
            outfolder ='/scratch/$SLURM_JOB_ID' # cluster_outfolder+'rs'
            shell("/usr/bin/time -v /proj/snic2022-6-31/nobackup/alexp/isONclust_rs/target/release/isONclust3 --fastq {input.fastq_alz} --mode pacbio  --outfolder {outfolder} --seeding minimizer --no-fastq true --no-post-cluster true --min-shared-minis {wildcards.min_shared_minis}")
            shell("python compute_cluster_quality.py  --clusters /scratch/$SLURM_JOB_ID/clustering/final_clusters.tsv --classes {input.alignment_alz} --outfile {output}")
                
                
rule droso_isonclust_rs:
        input: fastq_droso = infolder_droso +'data/full_length_output.fastq',
               alignment_droso = infolder_droso +"stringtie/drosophila_aligned.sorted.bam"
        output: outfolder_analysis+"isONclust_denovo_{min_shared_minis}_Droso.txt" 
        run:
            outfolder ='/scratch/$SLURM_JOB_ID' # cluster_outfolder+'rs'
            shell("/usr/bin/time -v /proj/snic2022-6-31/nobackup/alexp/isONclust_rs/target/release/isONclust3 --fastq {input.fastq_droso} --mode ont  --outfolder {outfolder} --seeding minimizer --no-fastq true --no-post-cluster true --min-shared-minis {wildcards.min_shared_minis}")
            shell("python compute_cluster_quality.py  --clusters /scratch/$SLURM_JOB_ID/clustering/final_clusters.tsv --classes {input.alignment_droso} --outfile {output}")

rule human_isonclust_rs:
        input: fastq_human = infolder_human_ont +'data/full_length_output.fastq',
               alignment_droso = infolder_human_ont +"stringtie/ont_human_aligned.sorted.bam"
        output: outfolder_analysis+"isONclust_denovo_{min_shared_minis}_ONTh.txt" 
        run:
            outfolder ='/scratch/$SLURM_JOB_ID' # cluster_outfolder+'rs'
            shell("/usr/bin/time -v /proj/snic2022-6-31/nobackup/alexp/isONclust_rs/target/release/isONclust3 --fastq {input.fastq_droso} --mode ont  --outfolder {outfolder} --seeding minimizer --no-fastq true --no-post-cluster true --min-shared-minis {wildcards.min_shared_minis}")
            shell("python compute_cluster_quality.py  --clusters /scratch/$SLURM_JOB_ID/clustering/final_clusters.tsv --classes {input.alignment_droso} --outfile {output}")

