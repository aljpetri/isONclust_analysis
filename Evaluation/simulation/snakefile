#Runnable the script by using the following: snakemake --cores 1 --configfile configs.json
import re
import os
import errno
import shutil
import glob
#The following variables represent the paths to the files required to run this pipeline

###File_location: Gives the location of the files that we want to analyse:
file_location=config["IN_SEQUENCE"]

###Script_input_folder: Equal to the folder the snakefile is located in. Should also contain all scripts needed for our analysis:
#script_input_folder="/home/alexanderpetri/isONform_analysis/Evaluation/Evaluate_SIRV/"
#script_input_folder=config["SCRIPT_FOLDER"]

### Output_folder: The folder in which all intermediate datasets as well as all real outputs are stored:
output_folder=config["OUTPUT_FOLDER"]
isoform_location=config["SEQ_DIR"]+"isoforms/"
outfolder = config["SEQ_DIR"]
###ref_folder: Path to the reference which we use to analyse the data
#ref_folder="/home/alexanderpetri/Desktop/RAWDATA_PhD1/100kSIRVSubsampling/"
#ref_folder=config["REFERENCE_FOLDER"]
sequence_dir = config["SEQ_DIR"]
script_folder=config["SCRIPT_FOLDER"]
max_iso_nr=config["MAX_ISO_NR"]
n_runs=config["RUNS"]
#minimap_out_folder=config["MINIMAP_OUT_FOLDER"]
RUN_ID=[str(x) for x in range(1,config["RUNS"] + 1)]
NR_ISOFORMS = [str(x) for x in range(2,config["MAX_ISO_NR"] + 1)]

MAX_ISO_NR=config["MAX_ISO_NR"]
rattle_dir=config["RATTLE_DIR"]
isExist = os.path.exists(outfolder)
if not isExist:
    # Create a new directory because it does not exist
    os.makedirs(outfolder)



rule all:
	input:  output_folder+'output_rs_denovo/final_clusters.tsv' #,rules.gen_sim_data.output.flag


rule gen_sim_data:
    input: file_location+'ERR3588903_1.fastq',
    output: flag=expand(sequence_dir+'/reads/{nr_isoforms}_{run_id}/reads_{nr_isoforms}_{run_id}.fastq',nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID), otherflag=expand(outfolder+'/isoforms/isoforms_{nr_isoforms}_{run_id}.fa',nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
    shell: './Generate_sim_reads.sh {max_iso_nr} {n_runs} {input} {outfolder}'
rule cluster_with_isonclust_rs:
    input: output_folder + 'reads/reads.fq'
    output: output_folder+'output_rs_denovo/final_clusters.tsv'
    run:	
        outfolder=output_folder+'output_rs_denovo',
        shell("cargo run --manifest-path ~/Rust/isONclust_rs/Cargo.toml -- --fastq {input} -k 13 -w 20  --outfolder {outfolder}")

