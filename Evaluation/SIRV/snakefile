##Run via submit_main_snakemake.sh
#this snakemake pipeline is used to analyse the performance of isONform on Drosophila Data


#The following variables represent the paths to the files required to run this pipeline

###Script_input_folder: Equal to the folder the snakefile is located in. Should also contain all scripts needed for our analysis:
#script_input_folder=config["SCRIPT_FOLDER"]
cluster_outfolder=config["CLUSTER_OUT"]

isonform_location=config["ISONFORM_LOCATION"]
isoform_abundance=config["ISO_ABUNDANCE"]
rattle_location=config["RATTLE_DIR"]
shell.prefix("set -o pipefail; ")
wildcard_constraints:
    nr_reads="[\d]+",
####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob

def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
	input:  cluster_outfolder+"result_rs_isONclust_denovo.txt" # , cluster_outfolder + "result_GeLuster.txt", cluster_outfolder + "result_rattle.txt",  cluster_outfolder + "result_py_isONclust.txt"#, cluster_outfolder+"result_rs_isONclust_denovo.txt"    # cluster_outfolder+"py/final_clusters.tsv",cluster_outfolder+"rs/final_clusters.tsv" #cluster_outfolder+ "/evaluation_biological/isONform/results_per_read.csv"#, cluster_outfolder+ "/evaluation_biological/RATTLE/results_per_read.csv"#, cluster_outfolder+ "/evaluation_biological/isONform/results_per_read.csv", cluster_outfolder+ "/evaluation_biological/RATTLE/results_per_read.csv"


###############################################################################################################################
#                                                PREPROCESSING                                                                #
###############################################################################################################################

##Preprocessing:some of our tools have issues with the accessions- we shorten them here
rule split_accessions_orig:
    input: fastq = config["original_reads"]
    output: original_reads_split_accessions =  cluster_outfolder + "data/split_accs.fq"

    run:
        shell("python split_accessions.py {input.fastq} {output.original_reads_split_accessions}")

##Use pychopper so every tool has the same possibility to perform
rule pychop:
	input: fastq = cluster_outfolder + "data/split_accs.fq"
	output: cluster_outfolder+'data/full_length_output.fastq'
	shell: 'pychopper -t 20 {input} {output}'

###############################################################################################################################
#                                                STRINGTIE PIPELINE                                                           #
###############################################################################################################################


##Align the original reads to the reference via minimap2 (part of the stringtie pipeline)
rule align_original_reads_minimap2:
    input:  original_reads = cluster_outfolder+'data/full_length_output.fastq'
    output: original_reads_aligned =  cluster_outfolder+"stringtie/SIRV_aligned.sam"
    run:
            ref ="/proj/snic2022-6-31/nobackup/alexp/References/SIRV/SIRV_reference.fasta ",
            shell("minimap2 --eqx -t 20 -ax splice -uf -k 13 -w 4 {ref} {input.original_reads} >  {output.original_reads_aligned} ")

##Sort the alignment(StringtiePipe)
rule sort_alignment:
	input: cluster_outfolder+"stringtie/SIRV_aligned.sam"
	output: cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam"
	shell: "samtools view -Su {input} | samtools sort -o {output}"

##Index the alignment(StringtiePipe)
rule index_alignment:
	input: cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam"
	output: cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam.bai"
	shell: "samtools index  {input}"


###############################################################################################################################
#                                                     ISONFORM ANALYSIS                                                       #
###############################################################################################################################



##Run the isONpipeline
rule run_isONclust_py:
    input: fastq = cluster_outfolder+'data/full_length_output.fastq',
           alignment = cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam",
           index = cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam.bai"
    output: cluster_outfolder + "result_py_isONclust.txt"
    run:
	    py_output_folder='/scratch/$SLURM_JOB_ID/py',
	    outfolder='/scratch/$SLURM_JOB_ID'
            shell("/usr/bin/time -v isONclust  --t 8 --ont --fastq {input.fastq} --outfolder {py_output_folder}"),
            shell("/usr/bin/time -v isONclust write_fastq --N 1 --clusters /scratch/$SLURM_JOB_ID/py/final_clusters.tsv --fastq {input.fastq} --outfolder {outfolder}")
            shell("python compute_cluster_quality.py --clusters /scratch/$SLURM_JOB_ID/py/final_clusters.tsv --classes {input.alignment} --outfile {output} --modified_ont")


rule run_isONclust_rs:
        input: fastq = cluster_outfolder + "data/full_length_output.fastq",
               alignment = cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam",
               index = cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam.bai"
        output: cluster_outfolder+"result_rs_isONclust_denovo.txt" # cluster_outfolder+"rs/clustering/final_clusters.tsv"
        run:
            outfolder='/scratch/$SLURM_JOB_ID' # cluster_outfolder+'rs',
            shell("/usr/bin/time -v /proj/snic2022-6-31/nobackup/alexp/isONclust_rs/target/release/isONclust3 --fastq {input.fastq} --mode ont  --outfolder {outfolder} --seeding minimizer  --noncanonical true")
            shell("python compute_cluster_quality.py  --clusters /scratch/$SLURM_JOB_ID/clustering/final_clusters.tsv --classes {input.alignment} --outfile {output} --modified_ont --post_cluster true")

rule run_GeLuster:
    input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
           alignment = cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam",
           index = cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam.bai"
    output: cluster_outfolder + "result_GeLuster.txt" #cluster_outfolder +'GeLuster/GeLuster.tsv'
    run:
        outfolder = '/scratch/$SLURM_JOB_ID/GeLuster' # cluster_outfolder+'GeLuster'
        shell("/usr/bin/time -v /proj/snic2022-6-31/nobackup/alexp/GeLuster/GeLuster -t 1 -r {input.fastq}  -f fq -s cDNA -o {outfolder}")
        shell("python compute_cluster_quality_geluster.py --clusters /scratch/$SLURM_JOB_ID/GeLuster/GeLuster.tsv --classes {input.alignment} --outfile {output}")
           

rule rattle_cluster:
    input:
        cluster_outfolder+'data/full_length_output.fastq',
        alignment = cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam",
        index = cluster_outfolder+"stringtie/SIRV_aligned.sorted.bam.bai"
    output:
        cluster_outfolder + "result_rattle.txt"
    run:
        rattle_out_folder = '/scratch/$SLURM_JOB_ID/rattle',
        clusters_out = '/scratch/$SLURM_JOB_ID/rattle/clusters.out'
        cl_summary = '/scratch/$SLURM_JOB_ID/rattle/cluster_summary.tsv'
        shell("mkdir /scratch/$SLURM_JOB_ID/rattle")
        shell("/usr/bin/time -v {rattle_location}rattle cluster -i {input} -t 1 -o {rattle_out_folder} ")
        shell("/usr/bin/time -v {rattle_location}rattle cluster_summary -i {input} -c {clusters_out} >  {cl_summary} ")
        shell("python compute_cluster_quality_geluster.py --clusters {cl_summary} --classes {input.alignment} --outfile {output}")
        



