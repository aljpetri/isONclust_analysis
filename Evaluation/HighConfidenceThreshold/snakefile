#Run via submit_main_snakemake.sh
#this snakemake pipeline is used to analyse the performance of isONform on Drosophila Data

#The following variables represent the paths to the files required to run this pipeline

###Script_input_folder: Equal to the folder the snakefile is located in. Should also contain all scripts needed for our analysis:
#script_input_folder=config["SCRIPT_FOLDER"]
outfolder_analysis = config["CLUSTER_OUT"]
infolder_alz = config["ALZ_IN"]
infolder_droso = config ["DROSO_IN"]
dataset = config["DATASET"]
quality_threshold = config["QUALITY_THRESHOLDS"]
#isonform_location=config["ISONFORM_LOCATION"]
#isoform_abundance=config["ISO_ABUNDANCE"]
#rattle_location=config["RATTLE_DIR"]
isonclust3_location = config["ISONCLUST3_DIR"]
shell.prefix("set -o pipefail; ")
wildcard_constraints:
    nr_reads="[\d]+",
####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob

def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
	input: expand(outfolder_analysis+"isONclust_denovo_{quality_threshold}_{dataset}.txt", quality_threshold=config["QUALITY_THRESHOLDS"], dataset =config["DATASET"]) 
###############################################################################################################################
#                                                     ISONFORM ANALYSIS                                                       #
###############################################################################################################################

rule alz_isONclust_rs:
        input: fastq_alz = infolder_alz +'data/full_length_output.fastq',
               alignment_alz = infolder_alz +"stringtie/ont_human_aligned.sorted.bam",
        output: outfolder_analysis+"isONclust_denovo_{quality_threshold}_ALZ.txt"
        params:
            this_folder = lambda wildcards: config["SCRATCH"] + f'rs_{wildcards.quality_threshold}_ALZ'
        run:
                this_folder = params.this_folder
                clusters_file = this_folder + '/clustering/final_clusters.tsv'
                shell("/usr/bin/time -v {isonclust3_location}isONclust3 --fastq {input.fastq_alz} --mode pacbio  --outfolder {this_folder} --seeding minimizer --quality-threshold {wildcards.quality_threshold}")
                shell("python compute_cluster_quality.py  --clusters {clusters_file} --classes {input.alignment_alz} --outfile {output}")

rule droso_isonclust_rs:
        input: fastq_droso = infolder_droso +'data/full_length_output.fastq',
               alignment_droso = infolder_droso +"stringtie/drosophila_aligned.sorted.bam"
        output: outfolder_analysis+"isONclust_denovo_{quality_threshold}_Droso.txt"
        params:
            this_folder = lambda wildcards: config["SCRATCH"] + f'rs_{wildcards.quality_threshold}_Droso'
        run:
            this_folder = params.this_folder
            clusters_file = this_folder + '/clustering/final_clusters.tsv'
            shell("/usr/bin/time -v {isonclust3_location}isONclust3 --fastq {input.fastq_droso} --mode ont  --outfolder {this_folder} --seeding minimizer --quality-threshold {wildcards.quality_threshold}")
            shell("python compute_cluster_quality.py  --clusters {clusters_file} --classes {input.alignment_droso} --outfile {output}")
