#Run via submit_main_snakemake.sh
#this snakemake pipeline is used to analyse the performance of isONform on Drosophila Data


#The following variables represent the paths to the files required to run this pipeline

###Script_input_folder: Equal to the folder the snakefile is located in. Should also contain all scripts needed for our analysis:
#script_input_folder=config["SCRIPT_FOLDER"]
cluster_outfolder=config["CLUSTER_OUT"]
rattle_location = config["RATTLE_DIR"]
isonclust3_location = config["ISONCLUST3_DIR"]
geluster_location = config["GELUSTER_DIR"]
scratch = config["SCRATCH"]
shell.prefix("set -o pipefail; ")
wildcard_constraints:
    nr_reads="[\d]+",
####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob

def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
	input: cluster_outfolder + "result_rs_isONclust_denovo.txt" , cluster_outfolder + "result_rs_isONclust_denovo_nc.txt", cluster_outfolder + "result_rs_isONclust_denovo_pc.txt" #, expand(cluster_outfolder + 'result_py_isONclust_{nr_cores}.txt', nr_cores = config["NR_CORES"])#, expand(cluster_outfolder + "result_GeLuster_{nr_cores}.txt", nr_cores = config["NR_CORES"]), expand(cluster_outfolder + "result_rattle_{nr_cores}.txt", nr_cores = config["NR_CORES"])


###############################################################################################################################
#                                                PREPROCESSING                                                                #
###############################################################################################################################

##Preprocessing:some of our tools have issues with the accessions- we shorten them here
#rule split_accessions_orig:
#    input: fastq = config["original_reads"]
#    output: original_reads_split_accessions =  cluster_outfolder + "data/split_accs.fq"

#    run:
#        shell("python split_accessions.py {input.fastq} {output.original_reads_split_accessions}")

##Use pychopper so every tool has the same possibility to perform
#rule pychop:
#	input: cluster_outfolder + "data/split_accs.fq"
#	output: cluster_outfolder+'data/full_length_output.fastq'
#	shell: 'pychopper -t 20 {input} {output}'

###############################################################################################################################
#                                                STRINGTIE PIPELINE                                                           #
###############################################################################################################################


##Align the original reads to the reference via minimap2 (part of the stringtie pipeline)
rule align_original_reads_minimap2:
    input: original_reads = cluster_outfolder + 'data/full_length_output.fastq' #cluster_outfolder+'/data/full_length_output.fastq'
    output: original_reads_aligned =  cluster_outfolder+"stringtie/ont_human_aligned.sam"
    run:
            ref =config["REFERENCE"],
            shell("minimap2 --eqx -t 20 -ax splice -uf -k 13 -w 4 {ref} {input.original_reads} >  {output.original_reads_aligned} ")

##Sort the alignment(StringtiePipe)
rule sort_alignment:
	input: cluster_outfolder+"stringtie/ont_human_aligned.sam"
	output: cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam"
	shell: "samtools view -Su {input} | samtools sort -o {output}"


##Index the alignment(StringtiePipe)
rule index_alignment:
	input: cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam"
	output: cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
	shell: "samtools index  {input}"



###############################################################################################################################
#                                                     ISONFORM ANALYSIS                                                       #
###############################################################################################################################


rule run_isONclust_py:
    input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
           alignment = cluster_outfolder + 'stringtie/ont_human_aligned.sorted.bam',
           index = cluster_outfolder + 'stringtie/ont_human_aligned.sorted.bam.bai'
    output: cluster_outfolder + 'result_py_isONclust_{nr_cores}.txt'
    params:
            this_folder = lambda wildcards: config["SCRATCH"] + f'py_{wildcards.nr_cores}'
    run:
            this_folder = params.this_folder
            clusters_file = this_folder + '/clustering/final_clusters.tsv'
            shell("mkdir {this_folder}")
            shell("/usr/bin/time -v isONclust --t {wildcards.nr_cores} --ont --fastq {input.fastq} --outfolder {this_folder}")
            shell("/usr/bin/time -v isONclust write_fastq --N 1 --clusters {clusters_file} --fastq {input.fastq} --outfolder {this_folder}")
            shell("python3 compute_cluster_quality.py --clusters {clusters_file} --classes {input.alignment} --outfile {output} ")


rule run_isONclust3:
        input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
               alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
               index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
        output: cluster_outfolder + "result_rs_isONclust_denovo.txt" 
        run:
            this_folder = config["SCRATCH"] + 'rs',
            clusters_file = this_folder + '/clustering/final_clusters.tsv'
            shell("mkdir {this_folder}")
            shell("/usr/bin/time -v {isonclust3_location}isONclust3 --fastq {input.fastq} --mode ont  --outfolder {this_folder} --seeding minimizer")
            shell("python3 compute_cluster_quality.py  --clusters {clusters_file} --classes {input.alignment} --outfile {output}")


rule run_isONclust3_nc:
        input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
               alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
               index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"

        output: cluster_outfolder + "result_rs_isONclust_denovo_nc.txt"
        run:
            this_folder = config["SCRATCH"] + 'rs_nc'
            clusters_file = this_folder + '/clustering/final_clusters.tsv'
            shell("mkdir {this_folder}")
            shell("/usr/bin/time -v {isonclust3_location}isONclust3 --fastq {input.fastq} --mode ont  --outfolder {this_folder} --seeding minimizer --noncanonical")
            shell("python3 compute_cluster_quality.py  --clusters {clusters_file} --classes {input.alignment} --outfile {output}")            
                        
rule run_isONclust3_pc:
        input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
               alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
               index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"

        output: cluster_outfolder+"result_rs_isONclust_denovo_pc.txt"
        run:
            this_folder = config["SCRATCH"] + 'rs_pc'
            clusters_file = this_folder + '/clustering/final_clusters.tsv'
            shell("mkdir {this_folder}")
            shell("/usr/bin/time -v {isonclust3_location}isONclust3 --fastq {input.fastq} --mode ont  --outfolder {this_folder} --seeding minimizer --post-cluster")
            shell("python3 compute_cluster_quality.py  --clusters {clusters_file} --classes {input.alignment} --outfile {output}")            

 
#rule run_GeLuster:
#    input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
#           alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
#           index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
#    output: cluster_outfolder + "result_GeLuster_{nr_cores}.txt"
#    params:
#            this_folder = lambda wildcards: config["SCRATCH"] + f'GeLuster_{wildcards.nr_cores}'
#    run:
#        this_folder = params.this_folder
#        clusters_file = this_folder + '/GeLuster.tsv'
#        shell("mkdir {this_folder}")
#        shell("/usr/bin/time -v {geluster_location}GeLuster -t {wildcards.nr_cores} -r {input.fastq}  -f fq -s cDNA -o {this_folder}")
#        shell("python3 compute_cluster_quality_geluster.py --clusters {clusters_file} --classes {input.alignment} --outfile {output}")  
        
        
#rule rattle_cluster:
#    input:
#        fastq = cluster_outfolder+'data/full_length_output.fastq',
#        alignment = cluster_outfolder + "stringtie/ont_human_aligned.sorted.bam",
#        index = cluster_outfolder + "stringtie/ont_human_aligned.sorted.bam.bai"
#    output:
#        cluster_outfolder + "result_rattle_{nr_cores}.txt"
#    params:
#            this_folder = lambda wildcards: config["SCRATCH"] + f'RATTLE_{wildcards.nr_cores}'
#    run:
#        this_folder = params.this_folder
#        clusters_out = this_folder + '/clusters.out'
#        clusters_file = this_folder + '/cluster_summary.tsv'
#        shell("mkdir {this_folder}")
#        shell("/usr/bin/time -v {rattle_location}rattle cluster -i {input.fastq} -t {wildcards.nr_cores} -o {this_folder} ")
#        shell("/usr/bin/time -v {rattle_location}rattle cluster_summary -i {input.fastq} -c {clusters_out} >  {clusters_file} ")
#        shell("python3 compute_cluster_quality_geluster.py --clusters {clusters_file} --classes {input.alignment} --outfile {output}") 



