#Run via submit_main_snakemake.sh
#this snakemake pipeline is used to analyse the performance of isONform on Drosophila Data


#The following variables represent the paths to the files required to run this pipeline

###Script_input_folder: Equal to the folder the snakefile is located in. Should also contain all scripts needed for our analysis:
#script_input_folder=config["SCRIPT_FOLDER"]
cluster_outfolder=config["CLUSTER_OUT"]
rattle_location = config["RATTLE_DIR"]
isonclust3_location = config["ISONCLUST3_DIR"]
geluster_location = config["GELUSTER_DIR"]
scratch = config["SCRATCH"]
shell.prefix("set -o pipefail; ")
wildcard_constraints:
    nr_reads="[\d]+",
####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob

def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
	input: cluster_outfolder + "result_rs_isONclust_denovo.txt" , cluster_outfolder + "result_rs_isONclust_denovo_nc.txt", cluster_outfolder + "result_rs_isONclust_denovo_pc.txt", expand(cluster_outfolder + 'result_py_isONclust_{nr_cores}.txt', nr_cores = config["NR_CORES"]), expand(cluster_outfolder + "result_GeLuster_{nr_cores}.txt", nr_cores = config["NR_CORES"]), expand(cluster_outfolder + "result_rattle_{nr_cores}.txt", nr_cores = config["NR_CORES"])


###############################################################################################################################
#                                                PREPROCESSING                                                                #
###############################################################################################################################

##Preprocessing:some of our tools have issues with the accessions- we shorten them here
#rule split_accessions_orig:
#    input: fastq = config["original_reads"]
#    output: original_reads_split_accessions =  cluster_outfolder + "data/split_accs.fq"

#    run:
#        shell("python split_accessions.py {input.fastq} {output.original_reads_split_accessions}")

##Use pychopper so every tool has the same possibility to perform
#rule pychop:
#	input: cluster_outfolder + "data/split_accs.fq"
#	output: cluster_outfolder+'data/full_length_output.fastq'
#	shell: 'pychopper -t 20 {input} {output}'

###############################################################################################################################
#                                                STRINGTIE PIPELINE                                                           #
###############################################################################################################################


##Align the original reads to the reference via minimap2 (part of the stringtie pipeline)
rule align_original_reads_minimap2:
    input: original_reads = cluster_outfolder + 'data/full_length_output.fastq' #cluster_outfolder+'/data/full_length_output.fastq'
    output: original_reads_aligned =  cluster_outfolder+"stringtie/ont_human_aligned.sam"
    run:
            ref =config["REFERENCE"],
            shell("minimap2 --eqx -t 20 -ax splice -uf -k 13 -w 4 {ref} {input.original_reads} >  {output.original_reads_aligned} ")

##Sort the alignment(StringtiePipe)
rule sort_alignment:
	input: cluster_outfolder+"stringtie/ont_human_aligned.sam"
	output: cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam"
	shell: "samtools view -Su {input} | samtools sort -o {output}"


##Index the alignment(StringtiePipe)
rule index_alignment:
	input: cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam"
	output: cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
	shell: "samtools index  {input}"




###############################################################################################################################
#                                                    RATTLE ANALYSIS                                                          #
###############################################################################################################################
"""
##Cluster the reads (RATTLE pipe)
#rule rattle_cluster:
#        input:
#                 cluster_outfolder+'/data/full_length_output.fastq'#cluster_outfolder+'/data/subsample.fastq'
#        output:
#                cluster_outfolder+"/rattle/clusters.out"
#        run:
#        	rattle_out_folder=cluster_outfolder+"/rattle/"
#           	shell("/usr/bin/time -v {rattle_location}rattle cluster -i {input} -t 20 -o {rattle_out_folder} ")

#rule rattle_cluster_results:
#       input:
#                 cluster_outfolder+"/rattle/clusters.out"
#
#        output:
#                cluster_outfolder+"/rattle/clusters.out"
#        run:
#               rattle_out_folder=cluster_outfolder+"/rattle/"
#               shell("/usr/bin/time -v {rattle_location}rattle cluster -i {input} -t 20 -o {rattle_out_folder} ")


##Correct the reads (RATTLE pipe)
#rule rattle_correct:
#        input:
#                clusters= cluster_outfolder+"/rattle/clusters.out", fastq=cluster_outfolder+'/data/full_length_output.fastq'
#        output:
#                cluster_outfolder+"/rattle/corrected.fq",
#                cluster_outfolder+"/rattle/uncorrected.fq",
#                cluster_outfolder+"/rattle/consensi.fq"
#
#        run:
#        	rattle_out_folder=cluster_outfolder+"/rattle/"
#             	shell("/usr/bin/time -v {rattle_location}/rattle correct -i {input.fastq} -c {input.clusters} -o {rattle_out_folder} -t 20  ")

##Polish the reads (RATTLE pipe)
#rule rattle_polish:
#        input:
#                cluster_outfolder+"/rattle/consensi.fq"
#        output:
#                cluster_outfolder+"/rattle/transcriptome.fq"
#        run:
#        	rattle_out_folder=cluster_outfolder+"/rattle/"
#             	shell("/usr/bin/time -v {rattle_location}/rattle polish -i {input} -o {rattle_out_folder} -t 20 ")

##Align the RATTLE consensus vs the reference (RATTLE evaluation)
#rule align_rattle_reference_minimap2:
#    input: corrected_reads = cluster_outfolder+"/rattle/transcriptome.fq"
#    output: rattle_aligned=cluster_outfolder + "/results/rattle_ref.sam"
#    run:
#            ref = config["drosophila97"]
#            shell("/usr/bin/time -v  minimap2 --eqx -t 20 -ax splice -uf -k13 -w4 {ref} {input.corrected_reads} >  {output} ")


#rule ultra_mm2_prep_Rattle:
#    input:
#    output: ref_index = cluster_outfolder + "/uLTRA_rattle/all_splice_sites_annotations.pickle"
#
#    run:
#        outfolder = cluster_outfolder + "/uLTRA_rattle"
#        mkdir_p(outfolder)
#        ref =  config["drosophila97"]
#        annotation = config["ANNOTATION"]
#        timer=cluster_outfolder +"/time_usage.txt"
#        shell("/usr/bin/time -v uLTRA index --disable_infer {ref} {annotation} {outfolder} --min_mem 17 --mask_threshold 200 2>&1 | tee {timer}")




##Align the RATTLE consensus vs the reference (via uLTRA)
#rule ultra_mm2_align_RATTLE:
#    input:  reads = cluster_outfolder+"/rattle/transcriptome.fq",
#            ultra_index = cluster_outfolder + "/uLTRA_rattle/all_splice_sites_annotations.pickle"
#            
#    output: sam = cluster_outfolder + "/uLTRA_rattle/reads.sam",
#            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/aligning_time_and_mem_rattle.txt"
#    run:
#        ref =  config["drosophila97"]
#        outfolder = cluster_outfolder + "/uLTRA_rattle"
#        shell("/usr/bin/time -v uLTRA align {ref} {input.reads}  {outfolder} --min_mem 17 --min_acc 0.6 --t 19  2>&1 | tee {output.time_and_mem} ") # 2> {output.time_and_mem})
"""
##Evaluate the RATTLE results
#rule evaluate_rattle:
#    input: original_reads = cluster_outfolder+"/stringtie/stringtie_transcripts.fasta",
#            corrected_reads = cluster_outfolder+"/rattle/transcriptome.fq",
#            original_reads_aligned = cluster_outfolder + "/uLTRA_st/reads.sam",
#            corrected_reads_aligned =  cluster_outfolder + "/uLTRA_rattle/reads.sam",
#            gtf_annotation = config["ANNOTATION"] # drosophila v97 gtf annotation
#    output: csv_file =  cluster_outfolder+ "/evaluation_biological/RATTLE/results_per_read.csv"
#    run:
#        ref =  config["drosophila97"]
#        #eval_dir = config["ROOT_IN"] + "/scripts/"
#        outfolder = cluster_outfolder+ "/evaluation_biological/RATTLE/"
#        mkdir_p(outfolder)
#        shell("/usr/bin/time -v python evaluate_real_reads_to_genome.py  {input.original_reads_aligned}  {input.corrected_reads_aligned} {input.original_reads}  \
#                                                        {input.corrected_reads} {ref} {input.gtf_annotation} {outfolder}")

###############################################################################################################################
#                                                     ISONCLUST ANALYSIS                                                       #
###############################################################################################################################

#rule compute_quality_py:
#	input: 	py_cluster = cluster_outfolder+"py/final_clusters.tsv",
#                alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
#                index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
#
#			#rs_cluster = isonclust_out_folder + "final_clusters_100k_annot.tsv"
#	output:	cluster_outfolder + "result_py_isONclust.txt"
#	shell: "python compute_cluster_quality.py --clusters {input.py_cluster} --classes {input.alignment} --outfile {output} --modified_ont"
		
#rule compute_quality_rs_annot:
#        input:  rs_cluster = cluster_outfolder+"annot/final_clusters.tsv",
#                alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
#                index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
#        output: cluster_outfolder+"result_rs_isONclust_annot.txt"
#        shell: "python compute_cluster_quality.py --clusters {input.rs_cluster} --classes {input.alignment} --outfile {output} --modified_ont"
		

#rule compute_quality_rs_denovo:
#	input: 	rs_cluster = cluster_outfolder+"rs/clustering/final_clusters.tsv",
#		alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
#		index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"		
#	output:	cluster_outfolder+"result_rs_isONclust_denovo.txt"
#	shell: "python compute_cluster_quality.py --clusters {input.rs_cluster} --classes {input.alignment} --outfile {output}"	


#rule compute_quality_geluster:
#	input: 	rs_cluster = cluster_outfolder + 'GeLuster/GeLuster.tsv',
#		alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
#		index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
#	output:	cluster_outfolder + "result_GeLuster.txt"
#	shell: "python compute_cluster_quality_geluster.py --clusters {input.rs_cluster} --classes {input.alignment} --outfile {output}"	

#rule compute_quality_rattle:
#        input:  rs_cluster = cluster_outfolder + 'rattle/cluster_summary.tsv',
#                alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
#                index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
#        output: cluster_outfolder + "result_rattle.txt"
#        shell: "python compute_cluster_quality_geluster.py --clusters {input.rs_cluster} --classes {input.alignment} --outfile {output}"     



###############################################################################################################################
#                                                     ISONFORM ANALYSIS                                                       #
###############################################################################################################################


rule run_isONclust_py:
    input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
           alignment = cluster_outfolder + 'stringtie/ont_human_aligned.sorted.bam',
           index = cluster_outfolder + 'stringtie/ont_human_aligned.sorted.bam.bai'
    output: cluster_outfolder + 'result_py_isONclust_{nr_cores}.txt'
    params:
            this_folder = lambda wildcards: config["SCRATCH"] + f'py_{wildcards.nr_cores}'
    run:
            clusters_file = this_folder + '/clustering/final_clusters.tsv'
            shell("mkdir {this_folder}")
            shell("/usr/bin/time -v isONclust --t {wildcards.nr_cores} --ont --fastq {input.fastq} --outfolder {this_folder}")
            shell("/usr/bin/time -v isONclust write_fastq --N 1 --clusters {clusters_file} --fastq {input.fastq} --outfolder {this_folder}")
            shell("python3 compute_cluster_quality.py --clusters {clusters_file} --classes {input.alignment} --outfile {output} ")


rule run_isONclust3:
        input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
               alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
               index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
        output: cluster_outfolder+"result_rs_isONclust_denovo.txt" 
        run:
            this_folder = config["SCRATCH"] + 'rs',
            clusters_file = config["SCRATCH"] + 'rs/clustering/final_clusters.tsv'
            shell("/usr/bin/time -v {isonclust3_location}isONclust3 --fastq {input.fastq} --mode ont  --outfolder {this_folder} --seeding minimizer")
            shell("python3 compute_cluster_quality.py  --clusters {clusters_file} --classes {input.alignment} --outfile {output}")


rule run_isONclust3_nc:
        input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
               alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
               index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"

        output: cluster_outfolder+"result_rs_isONclust_denovo_nc.txt"
        run:
            this_folder = config["SCRATCH"] + 'rs_nc'
            clusters_file = config["SCRATCH"] + 'rs_nc/clustering/final_clusters.tsv'
            shell("/usr/bin/time -v {isonclust3_location}isONclust3 --fastq {input.fastq} --mode ont  --outfolder {this_folder} --seeding minimizer --noncanonical")
            shell("python3 compute_cluster_quality.py  --clusters {clusters_file} --classes {input.alignment} --outfile {output}")            
                        
rule run_isONclust3_pc:
        input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
               alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
               index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"

        output: cluster_outfolder+"result_rs_isONclust_denovo_pc.txt"
        run:
            this_folder = config["SCRATCH"] + 'rs_pc'
            clusters_file = config["SCRATCH"] + 'rs_pc/clustering/final_clusters.tsv'
            shell("mkdir {outfolder}")
            shell("/usr/bin/time -v {isonclust3_location}isONclust3 --fastq {input.fastq} --mode ont  --outfolder {this_folder} --seeding minimizer --post-cluster")
            shell("python3 compute_cluster_quality.py  --clusters {clusters_file} --classes {input.alignment} --outfile {output}")            

 
rule run_GeLuster:
    input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
           alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
           index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
    output: cluster_outfolder + "result_GeLuster_{nr_cores}.txt"
    params:
            this_folder = lambda wildcards: config["SCRATCH"] + f'GeLuster_{wildcards.nr_cores}'
    run:
        clusters_file = {this_folder} + 'GeLuster.tsv'
        shell("mkdir {this_folder}")
        shell("/usr/bin/time -v {geluster_location}GeLuster -t {wildcards.nr_cores} -r {input.fastq}  -f fq -s cDNA -o {this_folder}")
        shell("python3 compute_cluster_quality_geluster.py --clusters {clusters_file} --classes {input.alignment} --outfile {output}")  
        
        
rule rattle_cluster:
    input:
        cluster_outfolder+'data/full_length_output.fastq',
        alignment = cluster_outfolder + "stringtie/ont_human_aligned.sorted.bam",
        index = cluster_outfolder + "stringtie/ont_human_aligned.sorted.bam.bai"
    output:
        cluster_outfolder + "result_rattle_{nr_cores}.txt"
    run:
        this_folder = config["SCRATCH"] + 'RATTLE',
        clusters_out = config["SCRATCH"] + 'RATTLE/clusters.out'
        clusters_file = config["SCRATCH"] + 'RATTLE/cluster_summary.tsv'
        shell("mkdir {this_folder}")
        shell("/usr/bin/time -v {rattle_location}rattle cluster -i {input} -t {wildcards.nr_cores} -o {this_folder} ")
        shell("/usr/bin/time -v {rattle_location}rattle cluster_summary -i {input} -c {clusters_out} >  {cl_summary} ")
        shell("python3 compute_cluster_quality_geluster.py --clusters {clusters_file} --classes {input.alignment} --outfile {output}") 



