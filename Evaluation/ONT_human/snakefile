#Run via submit_main_snakemake.sh
#this snakemake pipeline is used to analyse the performance of isONform on Drosophila Data


#The following variables represent the paths to the files required to run this pipeline

###Script_input_folder: Equal to the folder the snakefile is located in. Should also contain all scripts needed for our analysis:
#script_input_folder=config["SCRIPT_FOLDER"]
cluster_outfolder=config["CLUSTER_OUT"]
rattle_location=config["RATTLE_DIR"]
scratch = config["SCRATCH"]
shell.prefix("set -o pipefail; ")
wildcard_constraints:
    nr_reads="[\d]+",
####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob

def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
	input: cluster_outfolder+"result_rs_isONclust_denovo.txt",# cluster_outfolder + "result_GeLuster.txt",  , cluster_outfolder + "result_py_isONclust.txt",cluster_outfolder + "result_rattle.txt" #,cluster_outfolder+ "/evaluation_biological/isONform/results_per_read.csv"#, cluster_outfolder+ "/evaluation_biological/RATTLE/results_per_read.csv"#, cluster_outfolder+ "/evaluation_biological/isONform/results_per_read.csv", cluster_outfolder+ "/evaluation_biological/RATTLE/results_per_read.csv"


###############################################################################################################################
#                                                PREPROCESSING                                                                #
###############################################################################################################################

##Preprocessing:some of our tools have issues with the accessions- we shorten them here
rule split_accessions_orig:
    input: fastq = "/cfs/klemming/projects/snic/snic2022-6-31/alex/Rawdata/ONT_human/SRR28970532.fastq"
    output: original_reads_split_accessions =  cluster_outfolder + "data/split_accs.fq"

    run:
        shell("python3 split_accessions.py {input.fastq} {output.original_reads_split_accessions}")

##Use pychopper so every tool has the same possibility to perform
rule pychop:
	input: cluster_outfolder + "data/split_accs.fq"
	output: cluster_outfolder+'data/full_length_output.fastq'
	shell: 'pychopper -t 20 {input} {output}'

###############################################################################################################################
#                                                STRINGTIE PIPELINE                                                           #
###############################################################################################################################


##Align the original reads to the reference via minimap2 (part of the stringtie pipeline)
rule align_original_reads_minimap2:
    input: original_reads = cluster_outfolder + 'data/full_length_output.fastq' #cluster_outfolder+'/data/full_length_output.fastq'
    output: original_reads_aligned =  cluster_outfolder + "stringtie/ont_human_aligned.sam"
    run:
            ref = config["REFERENCE"],
            shell("minimap2 --eqx -t 20 -ax splice -uf -k 13 -w 4 {ref} {input.original_reads} >  {output.original_reads_aligned} ")

##Sort the alignment(StringtiePipe)
rule sort_alignment:
	input: cluster_outfolder + "stringtie/ont_human_aligned.sam"
	output: cluster_outfolder + "stringtie/ont_human_aligned.sorted.bam"
	shell: "samtools view -Su {input} | samtools sort -o {output}"

##Index the alignment(StringtiePipe)
rule index_alignment:
	input: cluster_outfolder + "stringtie/ont_human_aligned.sorted.bam"
	output: cluster_outfolder + "stringtie/ont_human_aligned.sorted.bam.bai"
	shell: "samtools index  {input}"



###############################################################################################################################
#                                                     ISONCLUST ANALYSIS                                                       #
###############################################################################################################################


#rule run_isONclust_py:
#    input: fastq = cluster_outfolder+'data/full_length_output.fastq',
#           alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
#           index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
#    output: cluster_outfolder + "result_py_isONclust.txt"
#    run:
#	    py_output_folder='/scratch/$SLURM_JOB_ID/py',
#	    outfolder='/scratch/$SLURM_JOB_ID'
#           shell("/usr/bin/time -v isONclust  --t 1  --ont --fastq {input.fastq} --outfolder {py_output_folder}"),
#            shell("/usr/bin/time -v isONclust write_fastq --N 1 --clusters config["SCRATCH"] + "py/final_clusters.tsv" --fastq {input.fastq} --outfolder {outfolder}")
#            shell("python3 compute_cluster_quality.py --clusters config["SCRATCH"] + "py/final_clusters.tsv" --classes {input.alignment} --outfile {output} ")


rule run_isONclust_rs:
        input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
               alignment = cluster_outfolder + "stringtie/ont_human_aligned.sorted.bam",
               index= cluster_outfolder + "stringtie/ont_human_aligned.sorted.bam.bai"
        output: cluster_outfolder + "result_rs_isONclust_denovo.txt"
        run:
            this_folder = config["SCRATCH"]+ 'rs/'
            clusters_file = config["SCRATCH"] + "rs/clustering/final_clusters.tsv"
            shell("/usr/bin/time -v /cfs/klemming/projects/snic/snic2022-6-31/alex/isONclust3/target/release/isONclust3 --fastq {input.fastq} --mode ont  --outfolder {this_folder} --seeding minimizer")
            shell("python3 compute_cluster_quality.py  --clusters {clusters_file} --classes {input.alignment} --outfile {output}")


#rule run_GeLuster:
#    input: fastq = cluster_outfolder + 'data/full_length_output.fastq',
#           alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
#           index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
#    output: cluster_outfolder + "result_GeLuster.txt" #cluster_outfolder +'GeLuster/GeLuster.tsv'
#    run:
#        shell("/usr/bin/time -v /proj/snic2022-6-31/nobackup/alexp/GeLuster/GeLuster -t 1 -r {input.fastq}  -f fq -s dRNA -o config["SCRATCH"] + "geluster/" ")
#        shell("python3 compute_cluster_quality_geluster.py --clusters config["SCRATCH"] + "geluster/GeLuster.tsv" --classes {input.alignment} --outfile {output}")
     
#rule rattle_cluster:
#    input:
#        cluster_outfolder+'data/full_length_output.fastq',
#        alignment = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam",
#        index = cluster_outfolder+"stringtie/ont_human_aligned.sorted.bam.bai"
#    output:
#        cluster_outfolder + "result_rattle.txt"
#    run:
#        rattle_out_folder = '/scratch/$SLURM_JOB_ID/rattle',
#        clusters_out = '/scratch/$SLURM_JOB_ID/rattle/clusters.out'
#        cl_summary = '/scratch/$SLURM_JOB_ID/rattle/cluster_summary.tsv'
#        shell("mkdir /scratch/$SLURM_JOB_ID/rattle")
#        shell("/usr/bin/time -v {rattle_location}rattle cluster -i {input} -t 1 -o {rattle_out_folder} ")
#        shell("/usr/bin/time -v {rattle_location}rattle cluster_summary -i {input} -c {clusters_out} >  {cl_summary} ")
#        shell("python3 compute_cluster_quality_geluster.py --clusters {cl_summary} --classes {input.alignment} --outfile {output}")





